#!/bin/sh
# vim: set filetype=sh:

################################################################################
# Purpose:   Provide helper script for OpenSSH client functionality
# Args/Opts: See usage (run with -h option).
# Meta:      Script installed by ansible {{ role_name | basename }}.
# Style:     ENV_VAR, GLOBAL_VAR, GLOBAL_READONLY_VAR, func_local_var, my_func
################################################################################

# GLOBAL VARS:

# Constants
PROG_NAME="$(basename "${0}")"
readonly PROG_NAME
DEFAULT_KEY_TYPE='{{ openssh_client_default_fido_key_type }}'
readonly DEFAULT_KEY_TYPE
OPEN_SSH_CLIENT_KEYGEN_CMD='ssh-keygen'
readonly OPEN_SSH_CLIENT_KEYGEN_CMD
TEMP_FIDO_KEYPAIRS_IMPORT_DIR='/tmp/ans_role_config_ssh_imported_fido_keypairs'
readonly TEMP_FIDO_KEYPAIRS_IMPORT_DIR

# Mutable User Cmd Option Selections
PRINT_HELP_MENU='false'
LIST_USER_KEYPAIRS='false'
LIST_FIDO_DEVICE_KEYPAIRS='false'
IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS='false'
CREATE_USER_KEYPAIR='false'
CREATE_KEYPAIR_ON_FIDO_DEVICE='false'
DELETE_USER_KEYPAIR='false'
DELETE_ALL_USER_KEYPAIRS='false'
PASSPHRASE=''
FIDO_TOUCH_REQUIRED='{{ openssh_client_default_fido_key_require_touch }}'
FIDO_PIN_REQUIRED='{{ openssh_client_default_fido_key_require_pin }}'
KEY_TYPE="${DEFAULT_KEY_TYPE}"
DELETE_KEYPAIRS_NOT_ON_FIDO_DEVICE='false'

# LOCAL FUNCTIONS:

print_usage() {
  prog_name_num_chars="$(printf "%s" "${PROG_NAME}" | wc -m)"
  leading_indent=''
  i=0
  while [ "${i}" -lt "${prog_name_num_chars}" ]; do
    leading_indent="${leading_indent} "
    i=$((i + 1))
  done

  printf "USAGE:\n"
  printf "  %s  -h\n" "${PROG_NAME}"
  printf "  %s  -l\n" "${PROG_NAME}"
  printf "  %s  -m\n" "${PROG_NAME}"
  printf "  %s  -i  [-D]\n" "${PROG_NAME}"
  printf "  %s  -c <key_descrip>  [-R <chars>]  [-K <key_type>]\n" "${PROG_NAME}"
  printf "  %s  -k <key_descrip>  [-U]  [-P]    [-K <key_type>]\n" "${PROG_NAME}"
  printf "  %s  -d <key_filename>\n" "${PROG_NAME}"
  printf "  %s  --delete-all-user-keypairs\n" "${PROG_NAME}"
  printf "OPTIONS:\n"
  printf "  -h, --help\n"
  printf "      print this help message\n"
  printf "  -l, --list-user-keypairs\n"
  printf "      list keypairs in user's ~/.ssh dir (including '_sk' refs to keys on FIDO device)\n"
  printf "  -m, --list-fido-device-keypairs\n"
  printf "      list keypairs on attached FIDO device\n"
  printf "  -i, --import-refs-to-fido-device-keypairs\n"
  printf "      in user's ~/.ssh dir, create refs to all keys on attached FIDO device\n"
  printf "  -c <key_descrip>, --create-user-keypair=<key_descrip>\n"
  printf "      create a new (normal) keypair in user's ~/.ssh dir (key_descrip format: 'service_username')\n"
  printf "  -k <key_descrip>, --create-keypair-on-fido-device=<key_descrip>\n"
  printf "      create a new keypair on attached FIDO device (key_descrip format: 'service_username')\n"
  printf "  -d <key_filename>, --delete-user-keypair=<key_filename>\n"
  printf "      delete a (normal) keypair from user's ~/.ssh dir (do not specify '.pub' extension)\n"
  printf "  --delete-all-user-keypairs\n"
  printf "      delete all (normal) keypairs from user's ~/.ssh dir\n"
  printf "  -R <chars>, --passphrase=<chars>\n"
  printf "      passphrase for normal keypair (default: no passphrase)\n"
  printf "  -U, --no-fido-touch-required\n"
  printf "      do not require a key-touch to use the created key (by default, it's required)\n"
  printf "  -P, --no-fido-pin-required\n"
  printf "      do not require a PIN to use the created key (by default, it's required)\n"
  printf "  -K <key_type>, --key-type=<key_type>\n"
  printf "      specify type of key to create: %s (default), ecdsa\n" "${DEFAULT_KEY_TYPE}"
  printf "  -D, --delete-keypairs-not-on-fido-device\n"
  printf "      delete any keypairs in user's ~/.ssh dir that are not on attached FIDO device\n"
  printf "EXIT CODES:\n"
  printf "    0  ok\n"
  printf "    1  ok, new and/or updated keypairs copied from FIDO device\n"
  printf "    5  usage, arguments, or options error\n"
  printf "    7  key list error\n"
  printf "   10  key creation erro\n"
  printf "   15  key deletion erro\n"
  printf "   25  key import error\n"
  printf "  255  unknown error\n"
}

get_cmd_opts() {
  while getopts ':hlmic:k:d:R:UPK:D-:' option; do
    short_opt_arg="${OPTARG}"
    case "${option}" in
      h)  handle_print_help_menu ;;
      l)  handle_list_user_keypairs ;;
      m)  handle_list_fido_device_keypairs ;;
      i)  handle_import_refs_to_fido_device_keypairs ;;
      c)  handle_create_user_keypair "${short_opt_arg}" ;;
      k)  handle_create_keypair_on_fido_device "${short_opt_arg}" ;;
      d)  handle_delete_user_keypair "${short_opt_arg}" ;;
      R)  handle_passphrase "${short_opt_arg}" ;;
      U)  handle_no_fido_touch_required ;;
      P)  handle_no_fido_pin_required ;;
      K)  handle_key_type "${short_opt_arg}" ;;
      D)  handle_delete_keypairs_not_on_fido_device ;;
      -)  long_opt_name="${OPTARG}"
          long_opt_arg="${OPTARG#*=}"
          case ${long_opt_name} in
            help)                                   handle_print_help_menu ;;
            help=*)                                 handle_illegal_long_option_arg "${long_opt_name}" ;;
            list-user-keypairs)                     handle_list_user_keypairs ;;
            list-user-keypairs=*)                   handle_illegal_long_option_arg "${long_opt_name}" ;;
            list-fido-device-keypairs)              handle_list_fido_device_keypairs ;;
            list-fido-device-keypairs=*)            handle_illegal_long_option_arg "${long_opt_name}" ;;
            import-refs-to-fido-device-keypairs)    handle_import_refs_to_fido_device_keypairs ;;
            import-refs-to-fido-device-keypairs=*)  handle_illegal_long_option_arg "${long_opt_name}" ;;
            create-user-keypair=?*)                 handle_create_user_keypair "${long_opt_arg}" ;;
            create-user-keypair*)                   handle_missing_long_option_arg "${long_opt_name}" ;;
            create-keypair-on-fido-device=?*)       handle_create_keypair_on_fido_device "${long_opt_arg}" ;;
            create-keypair-on-fido-device*)         handle_missing_long_option_arg "${long_opt_name}" ;;
            delete-user-keypair=?*)                 handle_delete_user_keypair "${long_opt_arg}" ;;
            delete-user-keypair*)                   handle_missing_long_option_arg "${long_opt_name}" ;;
            delete-all-user-keypairs)               handle_delete_all_user_keypairs ;;
            delete-all-user-keypairs=*)             handle_illegal_long_option_arg "${long_opt_name}" ;;
            passphrase=?*)                          handle_passphrase "${long_opt_arg}" ;;
            passphrase*)                            handle_missing_long_option_arg "${long_opt_name}" ;;
            no-fido-touch-required)                 handle_no_fido_touch_required ;;
            no-fido-touch-required=*)               handle_illegal_long_option_arg "${long_opt_name}" ;;
            no-fido-pin-required)                   handle_no_fido_pin_required ;;
            no-fido-pin-required=*)                 handle_illegal_long_option_arg "${long_opt_name}" ;;
            key-type=?*)                            handle_key_type "${long_opt_arg}" ;;
            key-type*)                              handle_missing_long_option_arg "${long_opt_name}" ;;
            delete-keypairs-not-on-fido-device)     handle_delete_keypairs_not_on_fido_device ;;
            delete-keypairs-not-on-fido-device=*)   handle_illegal_long_option_arg "${long_opt_name}" ;;
            '')                                     break ;; # non-option arg starting with '-'
            *)                                      handle_unknown_option "${long_opt_name}" ;;
          esac ;;
      \?) handle_unknown_option "${short_opt_arg}" ;;
    esac
  done
}

exit_with_cleanup() {
  err_code="${1}"
  rm -rf "${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}" 1> /dev/null 2>&1
  exit "${err_code}"
}

print_err_msg() {
  err_msg="${1}"
  printf "ERROR:\n%s: %s\n" "${PROG_NAME}" "${err_msg}"
}

quit_with_err_msg() {
  err_msg="${1}"
  err_code="${2}"
  print_err_msg "${err_msg}"
  exit_with_cleanup "${err_code}"
}

try_silent_with_exit() {
  cmd="${1}"
  err_msg="${2}"
  err_code="${3}"

  eval "${cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_with_err_msg "${err_msg}" "${err_code}"
  fi
}

handle_unknown_option() {
  short_opt_letter_or_long_opt_name="${1}"
  err_msg="unknown option \"${short_opt_letter_or_long_opt_name}\""
  quit_with_err_msg "${err_msg}" 5
}

handle_illegal_long_option_arg() {
  long_opt_name="${1}"
  err_msg="illegal argument in \"${long_opt_name}\""
  quit_with_err_msg "${err_msg}" 5
}

handle_missing_long_option_arg() {
  long_opt_name="${1}"
  err_msg="missing argument for option \"${long_opt_name}\""
  quit_with_err_msg "${err_msg}" 5
}

handle_print_help_menu() {
  if [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  PRINT_HELP_MENU='true'
}

handle_list_user_keypairs() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  LIST_USER_KEYPAIRS='true'
}

handle_list_fido_device_keypairs() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  LIST_FIDO_DEVICE_KEYPAIRS='true'
}

handle_import_refs_to_fido_device_keypairs() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS='true'
}

handle_create_user_keypair() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  KEY_DESCRIP="${1}"
  CREATE_USER_KEYPAIR='true'
}

handle_create_keypair_on_fido_device() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  KEY_DESCRIP="${1}"
  CREATE_KEYPAIR_ON_FIDO_DEVICE='true'
}

handle_delete_user_keypair() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  KEY_FILENAME="${1}"
  DELETE_USER_KEYPAIR='true'
}

handle_delete_all_user_keypairs() {
  if [ "${PRINT_HELP_MENU}" = 'true' ] || \
     [ "${LIST_USER_KEYPAIRS}" = 'true' ] || \
     [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ] || \
     [ "${CREATE_USER_KEYPAIR}" = 'true' ] || \
     [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ] || \
     [ "${DELETE_USER_KEYPAIR}" = 'true' ]; then
    quit_with_err_msg "mutually exclusive options selected" 5
  fi
  DELETE_ALL_USER_KEYPAIRS='true'
}

handle_passphrase() {
  PASSPHRASE="${1}"
}

handle_no_fido_touch_required() {
  FIDO_TOUCH_REQUIRED='false'
}

handle_no_fido_pin_required() {
  FIDO_PIN_REQUIRED='false'
}

handle_key_type() {
  KEY_TYPE="${1}"
}

handle_delete_keypairs_not_on_fido_device() {
  DELETE_KEYPAIRS_NOT_ON_FIDO_DEVICE='true'
}

set_user_keypairs_dir_path() {
  active_user_name="$(id -un)"
  if [ "${active_user_name}" = 'root' ]; then
    USER_KEYPAIRS_DIR="/root/.ssh"
  else
    USER_KEYPAIRS_DIR="/home/${active_user_name}/.ssh"
  fi
}

create_user_keypairs_dir_if_not_exist() {
  if [ ! -d "${USER_KEYPAIRS_DIR}" ]; then
    try_silent_with_exit \
      "mkdir \"${USER_KEYPAIRS_DIR}\"" \
      "error attempting to create user keypairs dir" 7
  fi

  try_silent_with_exit \
    "chmod 700 \"${USER_KEYPAIRS_DIR}\"" \
    "error attempting to set permissions on user keypairs dir" 7
}

create_cd_and_import_in_fido_keypairs_import_dir() {
  try_silent_with_exit \
    "mkdir \"${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}\"" \
    "error attempting to create temp FIDO keypairs import dir" 7

  cd "${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}" || exit 7

  try_silent_with_exit \
    "\"${OPEN_SSH_CLIENT_KEYGEN_CMD}\" -K" \
    "error attempting to import keypairs from FIDO device" 7
}

copy_fido_keypairs_to_user_keypairs_with_overwrite() {
  try_silent_with_exit \
    "cp -f \"${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}/*\" \"${USER_KEYPAIRS_DIR}\"" \
    "error attempting to copy FIDO device keypairs to user SSH keypairs dir" 25
}

append_fido_keypairs_to_user_keypairs() {
  create_cd_and_import_in_fido_keypairs_import_dir

  fido_keydir="${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}"
  user_keydir="${USER_KEYPAIRS_DIR}"
  diff --exclude 'known_hosts*' "${fido_keydir}" "${user_keydir}" | grep -q "${fido_keydir}"
  exit_code="${?}"
  if [ "${exit_code}" = 0  ]; then
    appending_new_or_modified_keypairs='true'
  else
    appending_new_or_modified_keypairs='false'
  fi

  copy_fido_keypairs_to_user_keypairs_with_overwrite

  if [ "${appending_new_or_modified_keypairs}" = 'true' ]; then
    exit_with_cleanup 1
  else
    exit_with_cleanup 0
  fi
}

replace_user_keypairs_with_fido_keypairs() {
  create_cd_and_import_in_fido_keypairs_import_dir

  if [ -z "$(diff --exclude 'known_hosts*' "${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}" "${USER_KEYPAIRS_DIR}")" ]; then
    user_keypairs_will_be_changed='false'
  else
    user_keypairs_will_be_changed='true'
  fi

  do_delete_all_user_keypairs
  copy_fido_keypairs_to_user_keypairs_with_overwrite

  if [ "${user_keypairs_will_be_changed}" = 'true' ]; then
    exit_with_cleanup 1
  else
    exit_with_cleanup 0
  fi
}

delete_keyfile() {
  keyfile_type="${1}"
  keyfile_name="${2}"

  target_key_file_path="${USER_KEYPAIRS_DIR}/${keyfile_name}"
  if [ "${keyfile_type}" = 'public' ]; then
    target_key_file_path="${target_key_file_path}.pub"
  fi

  if [ -f "${target_key_file_path}" ]; then
    try_silent_with_exit \
      "rm \"${target_key_file_path}\"" \
      "error deleting ${keyfile_type} keyfile \"${target_key_file_path}\"" 15
  else
    msg="${keyfile_type} keyfile \"${target_key_file_path}\" does not exist"
    quit_with_err_msg "${msg}" 15
  fi
}

do_print_help_menu() {
  print_usage
}

do_list_user_keypairs() {
  listing="$(find "${USER_KEYPAIRS_DIR}/" -type f -not -name "known_hosts*")"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_with_err_msg "error trying to find user keypairs" 7
  fi

  if [ "${listing}" = '' ]; then
    printf "No keypairs found in user SSH keypairs dir '%s'.\n" "${USER_KEYPAIRS_DIR}"
  else
    printf "Listing of user's SSH keypairs:\n"
    printf "%s\n" "${listing}"
  fi
}

do_list_fido_device_keypairs() {
  create_cd_and_import_in_fido_keypairs_import_dir

  printf "Listing of SSH keypairs on FIDO device:\n"
  try_silent_with_exit \
    "ls -1 \"${TEMP_FIDO_KEYPAIRS_IMPORT_DIR}\"" \
    "error attempting to list keypairs imported from FIDO device" 7
}

do_import_refs_to_fido_device_keypairs() {
  if [ "${DELETE_KEYPAIRS_NOT_ON_FIDO_DEVICE}" = 'true' ]; then
    replace_user_keypairs_with_fido_keypairs
  else
    append_fido_keypairs_to_user_keypairs
  fi
}

do_create_user_keypair() {
  cd "${USER_KEYPAIRS_DIR}" || exit 7

  timestamp="$(date +%Y-%m-%d-%H%M)"
  comment="Normal (non-FIDO-device) keypair. Created on ${timestamp}."
  filename="ssh_user_key_${KEY_TYPE}_${KEY_DESCRIP}"

  cmd="\"${OPEN_SSH_CLIENT_KEYGEN_CMD}\""
  cmd="${cmd} -t \"${KEY_TYPE}\""
  cmd="${cmd} -f \"${filename}\""
  cmd="${cmd} -N \"${PASSPHRASE}\""
  cmd="${cmd} -C \"${comment}\""

  try_silent_with_exit \
    "${cmd}" \
    "error attempting to create user SSH keypair" 10
}

do_create_keypair_on_fido_device() {
  timestamp="$(date +%Y-%m-%d-%H%M)"
  comment="Reference to keypair on FIDO device. Created on ${timestamp}."
  filename="ssh_fido_key_${KEY_TYPE}_${KEY_DESCRIP}"

  cmd="\"${OPEN_SSH_CLIENT_KEYGEN_CMD}\""
  cmd="${cmd} -t \"${KEY_TYPE}-sk\""
  cmd="${cmd} -C \"${comment}\""
  cmd="${cmd} -O \"application=ssh:${KEY_DESCRIP}\""

  if [ "${FIDO_PIN_REQUIRED}" = 'true' ]; then
    cmd="${cmd} -O verify-required"
  fi
  if [ "${FIDO_TOUCH_REQUIRED}" = 'false' ]; then
    cmd="${cmd} -O no-touch-required"
  fi

  try_silent_with_exit \
    "${cmd}" \
    "error attempting to create SSH keypair on FIDO device" 10
}

do_delete_user_keypair() {
  delete_keyfile "public" "${KEY_FILENAME}"
  delete_keyfile "private" "${KEY_FILENAME}"
}

do_delete_all_user_keypairs() {
  try_silent_with_exit \
    "find \"${USER_KEYPAIRS_DIR}/\" -type f -not -name \"known_hosts*\" -delete" \
    "error attempting to delete all user SSH keypairs" 25
}

# MAIN SCRIPT:

main() {
  get_cmd_opts "$@"
  set_user_keypairs_dir_path
  create_user_keypairs_dir_if_not_exist

  if [ "${PRINT_HELP_MENU}" = 'true' ]; then
    do_print_help_menu
  elif [ "${LIST_USER_KEYPAIRS}" = 'true' ]; then
    do_list_user_keypairs
  elif [ "${LIST_FIDO_DEVICE_KEYPAIRS}" = 'true' ]; then
    do_list_fido_device_keypairs
  elif [ "${IMPORT_REFS_TO_FIDO_DEVICE_KEYPAIRS}" = 'true' ]; then
    do_import_refs_to_fido_device_keypairs
  elif [ "${CREATE_USER_KEYPAIR}" = 'true' ]; then
    do_create_user_keypair
  elif [ "${CREATE_KEYPAIR_ON_FIDO_DEVICE}" = 'true' ]; then
    do_create_keypair_on_fido_device
  elif [ "${DELETE_USER_KEYPAIR}" = 'true' ]; then
    do_delete_user_keypair
  elif [ "${DELETE_ALL_USER_KEYPAIRS}" = 'true' ]; then
    do_delete_all_user_keypairs
  else
    quit_with_err_msg "no valid option selected" 5
  fi

  exit_with_cleanup 0
}

main "$@"

